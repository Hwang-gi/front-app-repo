name: EKS CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  Create-And-Log-In-AWS-ECR:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR repository
        env: 
          AWS_ECR: ${{ secrets.AWS_ECR }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "ECR Name: $AWS_ECR"
          echo "Region: $AWS_REGION"
          aws ecr create-repository --repository-name $AWS_ECR \
          --image-scanning-configuration scanOnPush=true \
          --region $AWS_REGION || echo "Repository already exists"

  Build-and-Push-Images:
    runs-on: ubuntu-latest
    needs: Create-And-Log-In-AWS-ECR

    steps:
      - name: Set up environment variables
        run: echo "VERSION=v1.0" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          VERSION=$(echo "${{ env.VERSION }}" | awk -F. -v OFS=. '{$NF++;print}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Check In Advance
        run: ls -R

      - name: Log in to Amazon ECR
        id: ecr-login
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and push Nginx images
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          cd ./front-app-repo/nginx
          for service in index main login order reservation reservationinfo signup; do
            # Build Docker image
            docker build -t ${{ secrets.AWS_ECR }}/nginx-$service:${{ env.VERSION }} -f ./$service/Dockerfile ./$service
            
            # Tag the image for ECR
            docker tag ${{ secrets.AWS_ECR }}/nginx-$service:${{ env.VERSION }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR }}/nginx-$service:${{ env.VERSION }}
            
            # Push the image to ECR
            docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR }}/nginx-$service:${{ env.VERSION }}
          done

      - name: Build and push Tomcat images
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          cd ./front-app-repo/Tomcat
          for service in index main login order reservationinfo signup; do
            # Build Docker image
            docker build -t ${{ secrets.AWS_ECR }}/tomcat-$service:${{ env.VERSION }} -f ./$service/Dockerfile ./$service
            
            # Tag the image for ECR
            docker tag ${{ secrets.AWS_ECR }}/tomcat-$service:${{ env.VERSION }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR }}/tomcat-$service:${{ env.VERSION }}
            
            # Push the image to ECR
            docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR }}/tomcat-$service:${{ env.VERSION }}
          done
