name: EKS CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  Create-And-Log-In-AWS-ECR:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR repository
        run: |
          aws ecr create-repository --repository-name ${{ secrets.AWS_ECR }} \
            --image-scanning-configuration scanOnPush=true \
            --region ${{ secrets.AWS_REGION }} || echo "Repository already exists, skipping creation."

  Build-and-Push-Images:
    runs-on: ubuntu-latest
    needs: Create-And-Log-In-AWS-ECR

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up environment variables
        run: |
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "AWS_ECR=${{ secrets.AWS_ECR }}" >> $GITHUB_ENV
          echo "VERSION=v1.0" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          VERSION=$(echo "${{ env.VERSION }}" | awk -F. -v OFS=. '{$NF++;print}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push images
        run: |
          for service in nginx Tomcat; do
            cd "./front-app-repo/$service"
            for app in index main login order reservation reservationinfo signup; do
              if [ -d "$app" ]; then
                cd "$app"
                echo "Building and pushing image for service: $app"

                # 리포지토리 이름
                REPOSITORY_NAME="${{ secrets.AWS_ECR }}"
                # 이미지 태그
                IMAGE_TAG="$service-$app:${{ env.VERSION }}"
                # 전체 이미지 이름
                IMAGE_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$REPOSITORY_NAME/$IMAGE_TAG"

                cd ..
              else
                echo "Directory $app does not exist"
              fi
            done
            cd ../../
          done
